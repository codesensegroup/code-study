{"_path":"/clean-arch/chapter33","_dir":"clean-arch","_draft":false,"_partial":false,"_locale":"","title":"33 影片銷售系統案例研究","description":"","pageTitle":"Chapter 33 影片銷售系統案例研究","contributors":["Yulin0629"],"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"clean-architecture-第33章影片銷售系統案例研究"},"children":[{"type":"text","value":"Clean Architecture 第33章：影片銷售系統案例研究"}]},{"type":"element","tag":"h2","props":{"id":"_1-案例研究的重要性"},"children":[{"type":"text","value":"1. 案例研究的重要性"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這章透過一個實際的影片銷售系統案例，展示了如何將 Clean Architecture 的原則應用到真實世界。這個案例特別重要，因為它："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"展示了如何從需求和業務邏輯出發進行系統設計"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"說明了如何在實務中平衡架構原則和實際限制"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"示範了好的架構如何支援系統演進"}]}]},{"type":"element","tag":"h2","props":{"id":"_2-產品概述"},"children":[{"type":"text","value":"2. 產品概述"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本案例探討一個線上影片銷售網站的系統架構設計："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"提供影片串流和下載服務"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支援個人用戶和企業用戶不同的授權模式"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"個人用戶可以：\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"付費串流觀看"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"付較高價格永久下載擁有"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"企業用戶限定：\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"僅提供串流服務"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可購買批量授權並享有數量折扣"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"_3-架構設計的核心精神"},"children":[{"type":"text","value":"3. 架構設計的核心精神"}]},{"type":"element","tag":"h3","props":{"id":"_31-從-use-case-開始設計"},"children":[{"type":"text","value":"3.1 從 Use Case 開始設計"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"系統設計的第一步是識別 actors 和 use cases，這反映了 Clean Architecture 重視業務規則的核心理念。"}]},{"type":"element","tag":"h4","props":{"id":"圖-331-use-case-分析"},"children":[{"type":"text","value":"圖 33.1 Use Case 分析"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Use Case Analysis","src":"/code-study/images/clean-arch/33/33.1.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這張圖展示了系統的 Use Case 分析："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"四個主要角色（Actors）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"清楚地展示了系統的主要使用者群"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每個角色都是系統變更的潛在來源"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"中心的抽象 Use Case"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"View Catalog"}]},{"type":"text","value":" 作為抽象 use case"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"被 "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"View Catalog as Viewer"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"View Catalog as Purchaser"}]},{"type":"text","value":" 繼承"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"展示了如何處理相似但不完全相同的功能"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"這種抽象能降低代碼重複，但保持足夠的彈性"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Use Case 的分布"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每個角色都有其特定的 use cases"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"清楚顯示了每個角色的職責範圍"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有助於理解系統的整體功能範圍"}]}]}]}]},{"type":"element","tag":"h4","props":{"id":"圖-332-元件架構"},"children":[{"type":"text","value":"圖 33.2 元件架構"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Component Architecture","src":"/code-study/images/clean-arch/33/33.2.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這張圖展示了系統的初步元件架構："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"層次結構"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用雙線表示架構邊界"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"展示了典型的 Clean Architecture 分層：\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Views（最外層）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Presenters"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interactors"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Controllers（最內層）"}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"依賴方向"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"控制流程從右到左"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"但大多數依賴箭頭指向左側"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"符合依賴規則：所有依賴都指向包含更高層級策略的元件"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"特殊處理"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Catalog View 和 Catalog Presenter 的特殊元件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"對應了圖 33.1 中的抽象 View Catalog use case"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用抽象類別來實現基礎功能"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"部署彈性"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每個框代表潛在的 .jar 或 .dll 文件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以根據需求選擇不同的部署策略"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"保持了架構的彈性"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"主要角色（Actors）："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"觀看者（Viewer）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"觀看購買的影片"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"瀏覽影片目錄"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"購買者（Purchaser）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"購買影片授權"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在企業情境中常與觀看者為不同人"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"作者（Author）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"提供影片檔案"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"提供書面說明"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"上傳輔助材料"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"管理者（Administrator）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"新增影片系列"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"管理影片內容"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"設定授權價格"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"特別注意："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"系統架構應該清楚展現這些 use cases"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"例如 "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"View Catalog"}]},{"type":"text","value":" 作為抽象 use case 的處理方式，展示了如何優雅地處理共用功能"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"這種設計讓系統的意圖一目了然"}]}]},{"type":"element","tag":"h3","props":{"id":"_32-分離的藝術"},"children":[{"type":"text","value":"3.2 分離的藝術"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"系統採用兩個維度的分離策略："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"水平分離（Layers）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"基於 Clean Architecture 的同心圓架構"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"由外而內依序為：\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Views（視圖層）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Presenters（展示層）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interactors（互動層）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Controllers（控制層）"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每層都有其明確職責"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"垂直分離（Actors）"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"基於不同的角色進行分離"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"確保對一個角色的改動不會影響其他角色"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"反映了 Conway 法則：系統架構應映射組織結構"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這種分離方式的優勢："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每個元件都有明確的單一職責"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"變更能被限制在特定範圍內"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支援多團隊並行開發"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"提高了系統的可維護性和擴展性"}]}]},{"type":"element","tag":"h3","props":{"id":"_33-依賴管理的實踐"},"children":[{"type":"text","value":"3.3 依賴管理的實踐"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本案例展示了如何具體實踐依賴規則："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"控制流程"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"從右到左流動"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Controllers → Interactors → Presenters → Views"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"源碼依賴"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"從左到右指向"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"確保高層策略（業務規則）不依賴於低層細節"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用開放封閉原則（OCP）維護正確的依賴方向"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"_34-部署彈性的預留"},"children":[{"type":"text","value":"3.4 部署彈性的預留"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"架構設計提供了多層次的部署選項："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"完全分離"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每個元件獨立部署為 jar/dll 檔案"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"最大化彈性，但部署複雜度較高"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"按層級分組"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"將相關元件組合成較大的部署單元"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"例如：前端層、業務層、資料層"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"簡化部署"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以簡化為前後端兩個主要部分"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"適合小型專案或初期開發"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"重要的是："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"即使選擇合併部署，程式碼層面的分離仍然重要"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"這種彈性允許系統根據需求演進"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"體現了「保持選項開放」的原則"}]}]},{"type":"element","tag":"h2","props":{"id":"_4-實務考量與權衡"},"children":[{"type":"text","value":"4. 實務考量與權衡"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"避免過度設計"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"作者不主張教條式的完全分離"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"承認可以根據實際需求調整部署策略"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"強調架構的目的是服務業務需求"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"演進的支援"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"架構設計應該支援系統隨時間演進"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"允許在不同部署策略間轉換"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"保持核心業務邏輯的獨立性"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"團隊協作"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"架構設計考慮到開發團隊的組織結構"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支援多團隊並行開發"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"明確的介面定義減少團隊間的衝突"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"_5-討論問題"},"children":[{"type":"text","value":"5. 討論問題"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"為什麼作者選擇以角色（Actor）作為系統分割的主要依據？"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"這個架構如何體現了清晰架構（Clean Architecture）的核心原則？"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在實際專案中，如何權衡元件拆分的粒度？"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何在保持架構彈性和降低複雜度之間取得平衡？"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"這種架構設計如何支援敏捷開發和持續交付？"}]}]},{"type":"element","tag":"h2","props":{"id":"_6-結論"},"children":[{"type":"text","value":"6. 結論"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本案例研究展示了："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何將抽象的架構原則落實到具體設計中"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"好的架構如何支援系統的長期發展"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何在理想架構和實務限制間取得平衡"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"_1-案例研究的重要性","depth":2,"text":"1. 案例研究的重要性"},{"id":"_2-產品概述","depth":2,"text":"2. 產品概述"},{"id":"_3-架構設計的核心精神","depth":2,"text":"3. 架構設計的核心精神","children":[{"id":"_31-從-use-case-開始設計","depth":3,"text":"3.1 從 Use Case 開始設計"},{"id":"_32-分離的藝術","depth":3,"text":"3.2 分離的藝術"},{"id":"_33-依賴管理的實踐","depth":3,"text":"3.3 依賴管理的實踐"},{"id":"_34-部署彈性的預留","depth":3,"text":"3.4 部署彈性的預留"}]},{"id":"_4-實務考量與權衡","depth":2,"text":"4. 實務考量與權衡"},{"id":"_5-討論問題","depth":2,"text":"5. 討論問題"},{"id":"_6-結論","depth":2,"text":"6. 結論"}]}},"_type":"markdown","_id":"content:6.clean-arch:33.chapter33.md","_source":"content","_file":"6.clean-arch/33.chapter33.md","_extension":"md"}