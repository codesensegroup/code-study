{"_path":"/ddia/chapter4","_dir":"ddia","_draft":false,"_partial":false,"_locale":"","title":"04 編碼與演化","description":"","pageTitle":"Chapter 04 編碼與演化","contributors":["Simon-din"],"body":{"type":"root","children":[{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n  tr, th, td {\n    border: none!important;\n  }\n  .nolinebreak {\n    white-space: nowrap;\n  }\n  .movepadding {\n    padding-left: 2%!important;\n  }\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"當資料的"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"格式"}]},{"type":"text","value":"(format)或"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"模式"}]},{"type":"text","value":"(schema)發生變化時，通常需要對應用程式程式碼進行相應的更改(例如，為記錄新增新欄位，然後修改程式開始讀寫該欄位)。但在大型應用程式中，程式碼變更通常不會立即完成："}]},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"服務端"}]},{"type":"text","value":"(server-side)："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"可能需要執行 "},{"type":"element","tag":"font","props":{"color":"#FF5151"},"children":[{"type":"text","value":"滾動升級"}]},{"type":"text","value":"(rolling upgrade)，一次將新版本部署到少數幾個節點，檢查新版本是否執行正常，然後逐漸部完所有的節點。"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"客戶端"}]},{"type":"text","value":"(client-side)："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"升不升級就要看使用者的心情了。使用者可能相當長一段時間裡都不會去升級軟體。"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這也表示，新舊版本的程式碼或是新舊資料格式可能會在系統中同時共處。系統想要繼續順利執行，就需要保持"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"雙向相容性"}]},{"type":"text","value":"："}]},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"向後相容"}]},{"type":"text","value":"(backward compatibility)："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"新的程式碼可以讀取由舊的程式碼寫入的資料。較容易處理，因為作者知道舊程式碼所使用的資料格式(一般最簡單的方法，就是保留舊程式碼即可讀取舊資料)。"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"向前相容"}]},{"type":"text","value":"(forward compatibility)："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"舊的程式碼可以讀取由新的程式碼寫入的資料。較不易處理，因為舊版的程式需要忽略新版資料格式中新增的部分。"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"h2","props":{"id":"編碼資料的格式bo"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"編碼資料的格式bo"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"程式通常(至少)使用兩種形式的資料："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"資料以物件、結構體、列表、陣列、散列表、樹等方式儲存到"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"記憶體"}]},{"type":"text","value":"中。這些資料結構針對 CPU 的高效訪問和操作進行了最佳化(通常使用指標)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"資料寫入檔案，或透過網路傳送，則必須將其轉換為某種自包含的位元組序列(例如，JSON 文件)。這個位元組序列表示會與通常在記憶體中使用的資料結構不同。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要在兩種表示之間進行某種型別的翻譯。從記憶體中表示到位元組序列的轉換稱為"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"編碼"}]},{"type":"text","value":"(Encoding)(也稱為"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"序列化"}]},{"type":"text","value":"(serialization)或"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"編組"}]},{"type":"text","value":"(marshalling))，反過來稱為"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"解碼"}]},{"type":"text","value":"(Decoding)2("},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"解析"}]},{"type":"text","value":"(Parsing)，"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"反序列化"}]},{"type":"text","value":"(deserialization)，"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"反編組"}]},{"type":"text","value":" (unmarshalling))"}]},{"type":"element","tag":"h3","props":{"id":"語言特定的格式"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"語言特定的格式"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"許多程式語言都內建了將記憶體物件編碼為位元組序列的支援。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Java 有 java.io.Serializable。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ruby 有 Marshal。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Python 有 pickle。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第三方類別庫像是 Kryo for Java ....等。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"編碼庫很方便，可以用很少的程式碼實現記憶體物件的儲存與恢復。但也有一些深層次的問題："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"與特定的程式語言深度繫結，其他語言很難讀取這種資料，且很難將系統與其他組織的系統(可能用的是不同的語言)進行整合。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"為了恢復相同物件型別的資料，解碼過程需要 例項化任意類。這會有安全性問題，若攻擊者可以讓應用程式解碼任意的位元組序列，他們就能例項化任意的類。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"容易出現向前向後相容性帶來的麻煩問題。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"效率(編碼或解碼所花費的 CPU 時間，以及編碼結構的大小)。例如，Java 的內建序列化由於其糟糕的效能和臃腫的編碼而臭名昭著。"}]}]},{"type":"element","tag":"h3","props":{"id":"jsonxml和csv"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"JSON、XML和CSV"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"JSON，XML 和 CSV 屬於文字格式，因此具有人類可讀性。但也存在一些微妙的問題："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"數字(numbers)編碼有很多模糊之處。在 XML 和 CSV 中，無法區分數字和純數字組成的字串(除了引用外部模式)。JSON 雖然區分字串與數字，但並不區分整數和浮點數，並且不能指定精度。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"處理大數字時是個問題。例如大於"},{"type":"element","tag":"mjx-container","props":{"className":["MathJax"],"jax":"SVG"},"children":[{"type":"element","tag":"svg","props":{"style":"vertical-align: 0;","xmlns":"http://www.w3.org/2000/svg","width":"2.919ex","height":"1.887ex","role":"img","focusable":"false","viewBox":"0 -833.9 1290.1 833.9","xmlnsXLink":"http://www.w3.org/1999/xlink"},"children":[{"type":"element","tag":"defs","props":{},"children":[{"type":"element","tag":"path","props":{"id":"MJX-1-TEX-N-32","d":"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"},"children":[]},{"type":"element","tag":"path","props":{"id":"MJX-1-TEX-N-35","d":"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"},"children":[]},{"type":"element","tag":"path","props":{"id":"MJX-1-TEX-N-33","d":"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"},"children":[]}]},{"type":"element","tag":"g","props":{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","transform":"scale(1,-1)"},"children":[{"type":"element","tag":"g","props":{"dataMmlNode":"math"},"children":[{"type":"element","tag":"g","props":{"dataMmlNode":"msup"},"children":[{"type":"element","tag":"g","props":{"dataMmlNode":"mn"},"children":[{"type":"element","tag":"use","props":{"dataC":"32","xLinkHref":"#MJX-1-TEX-N-32"},"children":[]}]},{"type":"element","tag":"g","props":{"dataMmlNode":"TeXAtom","transform":"translate(533,363) scale(0.707)","dataMjxTexclass":"ORD"},"children":[{"type":"element","tag":"g","props":{"dataMmlNode":"mn"},"children":[{"type":"element","tag":"use","props":{"dataC":"35","xLinkHref":"#MJX-1-TEX-N-35"},"children":[]},{"type":"element","tag":"use","props":{"dataC":"33","xLinkHref":"#MJX-1-TEX-N-33","transform":"translate(500,0)"},"children":[]}]}]}]}]}]}]}]},{"type":"text","value":"的整數無法使用 IEEE 754 雙精度浮點數精確表示因此在使用浮點數(例如 JavaScript)的語言進行分析時，這些數字會變得不準確。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"JSON 和 XML 不支援二進位制資料(即不帶 字元編碼(character encoding)的位元組序列)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"XML 和 JSON 都有可選的模式支援。這些模式語言相當強大，相對學習和實現起來都比較複雜。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"CSV 沒有任何模式，因此每行和每列的含義完全由應用程式自行定義。如果應用程式變更添加了新的行或列，那麼這種變更必須透過手工處理。"}]}]},{"type":"element","tag":"h4","props":{"id":"二進位制編碼"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"二進位制編碼"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"小資料集合的編碼造成的效能影響可以忽略不計；但一旦達到 TB 級別，資料格式的選型就會產生巨大的影響。二進位制串是很有用的功能，人們透過使用 Base64 將二進位制資料編碼為文字來繞過此限制。其特有的模式標識著這個值應當被解釋為 Base64 編碼的二進位制資料。"}]},{"type":"element","tag":"pre","props":{"code":"{\n    \"userName\": \"Martin\",\n    \"favoriteNumber\": 1337,\n    \"interests\": [\"daydreaming\", \"hacking\"]\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"userName\": \"Martin\",\n    \"favoriteNumber\": 1337,\n    \"interests\": [\"daydreaming\", \"hacking\"]\n}\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h5","props":{"id":"messagepack"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"MessagePack"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下圖為 MessagePack 編碼後的格式定義：\n"},{"type":"element","tag":"img","props":{"alt":"001","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-1.png"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 1 個位元組為 83(1000 0011)，1000 表示資料型別為 fixmap，0011 表示有 3 個項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 2 ~ 10 個位元組表示欄位 \"userName\"。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 2 個位元組為 a8(1010 1000)，101 表示資料型別為 fixstr，01000 表示長度為 8。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 3 ~ 10 個位元組表示 userName 的 ASCII 編碼。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 11 ~ 17 個位元組表示值 \"Martin\"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 18 ~ 32 個位元組表示欄位 \"favoriteNumber\"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 33 ~ 35 個位元組表示值 1337。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 33 個位元組為 cd(1100 1101)，表示資料型別為 uint16。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 34 ~ 35 表示 1337(05 39) 的十六進制編碼。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 36 ~ 45 個位元組表示欄位 \"interests\"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 46 ~ 66 個位元組表示為一個陣列集合的資料。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 46 個位元組為 92(1001 0010)，1001 表示資料型別為 fixarray，0010 表示有 2 個項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 47 ~ 58 個位元組表示值 \"daydreaming\"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 59 ~ 66 個位元組表示值 \"hacking\"。"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"詳細教學可參考"},{"type":"element","tag":"a","props":{"href":"https://msgpack.org/","title":"Title"},"children":[{"type":"text","value":"MessagePack官網"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h5","props":{"id":"thrift"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"Thrift"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下圖為 Thrift BinaryProtocol 編碼後的格式定義：\n"},{"type":"element","tag":"img","props":{"alt":"002","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-2.png"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 1 ~ 13 個位元組表示值 \"Martin\"。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 1 個位元組為 0b 表示為資料型別為 string。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 2 ~ 3 個位元組為 00 01 表示為第 1 個項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 4 ~ 7 個位元組為 00 00 00 06 表示為長度為 6。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 8 ~ 13 個位元組表示 Martin 的 ASCII 編碼。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 14 ~ 24 個位元組表示值 1337。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 14 個位元組為 0a 表示為資料型別為 int64。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 15 ~ 16 個位元組為 00 02 表示為第 2 個項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 17 ~ 24 個位元組表示 1337 的十六進制編碼。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 25 ~ 59 個位元組表示 1 個陣列集合。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 25 個位元組為 0f 表示為資料型別為 list。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 26 ~ 27 個位元組為 00 03 表示為第 3 個項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 28 個位元組為 0b 表示為集合內的資料型別為 string。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 29 ~ 32 個位元組為 00 00 00 02 表示集合含有 2 個項目。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 33 ~ 36 個位元組為 00 00 00 0b 表示為長度為 11。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 37 ~ 47 個位元組為 daydreaming 的 ASCII 編碼。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 48 ~ 51 個位元組為 00 00 00 07 表示為長度為 7。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 52 ~ 58 個位元組為 hacking 的 ASCII 編碼。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 59 個位元組為此集合的結束標記。"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"詳細教學可參考"},{"type":"element","tag":"a","props":{"href":"https://github.com/apache/thrift/blob/master/doc/specs/thrift-binary-protocol.md","title":"Title"},"children":[{"type":"text","value":"Thrift Binary protocol encoding"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下圖為 Thrift CompactProtocol 編碼後的格式定義：\n"},{"type":"element","tag":"img","props":{"alt":"003","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-3.png"},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 1 ~ 8 個位元組表示值 \"Martin\"。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 1 個位元組為 18(0001 1000)。0001 表示 1 個項目，1000 表示為資料型別為 string。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 2 個位元組為 06 表示為長度為 6。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 3 ~ 8 個位元組表示 Martin 的 ASCII 編碼。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 9 ~ 11 個位元組表示值 1337。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 9 個位元組為 16(0001 0110)。0001 表示 1 個項目，0110 表示為資料型別為 int64。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 10 ~ 11 個位元組表示 1337 的十六進制編碼(先作 ZigZag，再作 varint)。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 12 ~ 34 個位元組表示值一個陣列集合。\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 12 個位元組為 19(0001 1001)。0001 表示 1 個項目，1001 表示為資料型別為 list。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 13 個位元組為 28(0010 1000)。0010 表示 2 個項目，1000 表示為資料型別為 string。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 14 ~ 25 個位元組表示 daydreaming 的長度 及 ASCII 編碼。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 26 ~ 33 個位元組表示 hacking 的長度 及 ASCII 編碼。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"第 34 個位元組為此集合的結束標記。"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"詳細教學可參考"},{"type":"element","tag":"a","props":{"href":"https://github.com/apache/thrift/blob/master/doc/specs/thrift-compact-protocol.md","title":"Title"},"children":[{"type":"text","value":"Thrift Compact protocol encoding"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h5","props":{"id":"protocol-buffers"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"Protocol Buffers"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下圖為 Protocol Buffers 編碼後的格式定義：\n"},{"type":"element","tag":"img","props":{"alt":"004","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-4.png"},"children":[]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h5","props":{"id":"avro"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"Avro"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下圖為 Thrift CompactProtocol 編碼後的格式定義：\n"},{"type":"element","tag":"img","props":{"alt":"005","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-5.png"},"children":[]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h6","props":{"id":"writer模式與reader模式"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"Writer模式與Reader模式"}]}]}]},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"Writer 模式"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"應用程式想要編碼一些資料(將其寫入檔案或資料庫，透過網路傳送等)時，它使用它知道的任何版本的模式編碼資料。"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"Reader 模式"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"應用程式想要解碼一些資料(從一個檔案或資料庫讀取資料，從網路接收資料等)時，它希望資料在某個模式中。"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Avro 的關鍵思想是 Writer 模式和 Reader 模式不必是相同的 - 他們只需要相容。當資料解碼(讀取)時，Avro 庫透過並排檢視 Writer 模式和 Reader 模式並將資料從 Writer 模式轉換到 Reader 模式來解決差異。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Writer 模式和 Reader 模式的欄位順序不同，這是沒有問題的，因為模式解析透過欄位名匹配欄位。如果讀取資料的程式碼遇到出現在 Writer 模式中但不在 Reader 模式中的欄位，則忽略它。如果讀取資料的程式碼需要某個欄位，但是 Writer 模式不包含該名稱的欄位，則使用在 Reader 模式中宣告的預設值填充。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"006","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-6.png"},"children":[]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"h6","props":{"id":"writer模式到底是什麼"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"Writer模式到底是什麼"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"對於一段特定的編碼資料，Reader 如何知道其 Writer 模式？這取決於 Avro 使用的上下文。例如："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有很多記錄的大檔案。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支援獨立寫入的記錄的資料庫。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"透過網路連線傳送記錄。"}]}]},{"type":"element","tag":"h3","props":{"id":"模式的優點"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"模式的優點"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以比各種 “二進位制 JSON” 變體更緊湊，因為它們可以省略編碼資料中的欄位名稱。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"模式是一種有價值的文件形式，因為模式是解碼所必需的，所以可以確定它是最新的。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"維護一個模式的資料庫允許你在部署任何內容之前檢查模式更改的向前和向後相容性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"對於靜態型別程式語言的使用者來說，從模式生成程式碼的能力是有用的，因為它可以在編譯時進行型別檢查。"}]}]},{"type":"element","tag":"h2","props":{"id":"資料流的型別"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"資料流的型別"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"想要將某些資料傳送到不共享記憶體的另一個程序，就需要將它編碼為一個位元組序列。而資料可以透過多種方式從一個流程流向另一個流程，下列是一些常見的方式："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"透過資料庫(詳細參閱 資料庫中的資料流)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"透過服務呼叫(詳細參閱 服務中的資料流：REST與RPC)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"透過非同步訊息傳遞(詳細參閱 訊息傳遞中的資料流)。"}]}]},{"type":"element","tag":"h3","props":{"id":"資料庫中的資料流"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"資料庫中的資料流"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在資料庫中，寫入資料庫的過程對資料進行編碼，從資料庫讀取的過程對資料進行解碼。假若今天有一個程序訪問資料庫，在這種情況下，當程序更新為後續版本，就必須考慮將資料庫中的內容儲存為能向未來的自身程序傳送訊息。因此向後相容性顯然是必要的，否則你未來的程序將無法解碼你以前程序的資料。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"006","src":"https://raw.githubusercontent.com/Vonng/ddia/master/img/fig4-7.png"},"children":[]},{"type":"element","tag":"font","props":{"size":2,"color":"#FF9797"},"children":[{"type":"text","value":"當較舊版本的應用程式更新以前由較新版本的應用程式編寫的資料時，如果不小心，資料可能會丟失。"}]}]},{"type":"element","tag":"h4","props":{"id":"在不同的時間寫入不同的值"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"在不同的時間寫入不同的值"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"資料庫通常允許任何時候更新任何值。這意味著在一個單一的資料庫中，可能有一些值是五毫秒前寫的，而一些值是五年前寫的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"將資料重寫(遷移)到一個新的模式當然是可能的，但是在一個大資料集上執行是一個昂貴的事情，所以大多數資料庫如果可能的話就避免它。大多數關係資料庫都允許簡單的模式更改，例如新增一個預設值為空的新列，而不重寫現有資料。讀取舊行時，對於磁碟上的編碼資料缺少的任何列，資料庫將填充空值。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因此，模式演變允許整個資料庫看起來好像是用單個模式編碼的，即使底層儲存可能包含用各種歷史版本的模式編碼的記錄。"}]},{"type":"element","tag":"h4","props":{"id":"歸檔儲存"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"歸檔儲存"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"也許你不時為資料庫建立一個快照，例如備份或載入到資料倉庫。在這種情況下，即使源資料庫中的原始編碼包含來自不同時代的模式版本的混合，資料轉儲通常也將使用最新模式進行編碼。既然你不管怎樣都要複製資料，那麼你可以對這個資料複製進行一致的編碼。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由於資料轉儲是一次寫入的，而且以後是不可變的，所以 Avro 物件容器檔案等格式非常適合。這也是一個很好的機會，可以將資料編碼為面向分析的列式格式，例如列壓縮(Parquet)。"}]},{"type":"element","tag":"h3","props":{"id":"服務中的資料流rest與rpc"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"服務中的資料流：REST與RPC"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"透過網路進行通訊的方式最常見的安排兩個角色："}]},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"伺服器"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"透過網路公開 API，也就是所謂的服務。"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"客戶端"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"可以連線到伺服器以向該 API 發出請求。"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Web 以這種方式工作：客戶(Web 瀏覽器)向 Web 伺服器發出請求，透過 GET 請求下載 HTML、CSS、JavaScript、影象等，並透過 POST 請求提交資料到伺服器。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"API 則包含一組標準的協議和資料格式(HTTP、URL、SSL/TLS、HTML 等)。由於網路瀏覽器、網路伺服器和網站作者大多同意這些標準，因此可以使用任何網路瀏覽器訪問任何網站。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"也由於 Web 瀏覽器不是唯一的客戶端型別，所以伺服器的響應通常不是用於顯示給人的 HTML，而是便於客戶端應用程式進一步處理的編碼資料(例如 JSON)。雖然 HTTP 可能被用作傳輸協議，但頂層實現的 API 是特定於應用程式的，客戶端和伺服器需要就該 API 的細節達成一致。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"伺服器本身可以是另一個服務的客戶端(例如，典型的 Web 應用伺服器充當資料庫的客戶端)。這種方法通常用於將大型應用程式按照功能區域分解為較小的服務，這樣當一個服務需要來自另一個服務的某些功能或資料時，就會向另一個服務發出請求。這種構建應用程式的方式傳統上被稱為"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"面向服務的體系結構"}]},{"type":"text","value":"(service-oriented architecture，SOA)，最近被改進和更名為"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"微服務架構"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這類服務類似於資料庫，它們通常允許客戶端提交和查詢資料。並公開了一個特定於應用程式的 API，只允許由服務的業務邏輯(應用程式程式碼)預定的輸入和輸出。這種限制提供了一定程度的封裝，限制了對客戶可以做什麼和不可以做什麼。面向服務 / 微服務架構的設計目標是使服務獨立部署來讓應用程式更易於更改和維護。每個服務應該由一個開發團隊擁有，而不必與其他團隊協調，因此伺服器和客戶端使用的資料編碼必須在不同版本的服務 API 之間相容。"}]},{"type":"element","tag":"h4","props":{"id":"web服務"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"Web服務"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"服務使用 HTTP 作為底層通訊協議時，可稱之為 Web 服務。它不僅在 Web 上使用，而且在幾個不同的環境中使用："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"執行在使用者裝置上的客戶端應用程式，透過 HTTP 向服務發出請求。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"一個服務向同一組織擁有的另一個服務提出請求，這些服務通常位於同一資料中心內，作為面向服務 / 微服務架構的一部分。(支援這種用例的軟體有時被稱為"},{"type":"element","tag":"font","props":{"color":"#FF0800"},"children":[{"type":"text","value":"中介軟體"}]},{"type":"text","value":"(middleware))"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"一個服務透過網際網路向不同組織所擁有的服務提出請求。這用於不同組織後端系統之間的資料交換。此類別包括由線上服務(如信用卡處理系統)提供的公共 API，或用於共享訪問使用者資料的 OAuth。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"兩種流行的 Web 服務方法："}]},{"type":"element","tag":"table","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"REST"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"是一個基於 HTTP 原則的設計。強調簡單的資料格式，使用 URL 來標識資源，並使用 HTTP 功能進行快取控制，身份驗證和內容型別協商。"}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["nolinebreak","movepadding"]},"children":[{"type":"element","tag":"font","props":{"color":"#FF77FF"},"children":[{"type":"text","value":"SOAP"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n    "},{"type":"element","tag":"td","props":{"className":["movepadding"]},"children":[{"type":"text","value":"用於製作網路 API 請求，使用稱為 Web 服務描述語言(WSDL，詳細教學可參考"},{"type":"element","tag":"a","props":{"href":"https://www.1ju.org/wsdl/index","title":"Title"},"children":[{"type":"text","value":"WSDL教學"}]},{"type":"text","value":")的基於 XML 的協議。WSDL 支援程式碼生成，客戶端可以使用本地類和方法呼叫(編碼為 XML 訊息並由框架再次解碼)訪問遠端服務。雖然它最常用於 HTTP，但其目的是獨立於 HTTP，並避免使用大多數 HTTP 功能。"}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"WSDL文件範例如下："}]},{"type":"element","tag":"pre","props":{"code":"<definitions name = \"HelloService\"\n   targetNamespace = \"http://www.examples.com/wsdl/HelloService.wsdl\"\n   xmlns = \"http://schemas.xmlsoap.org/wsdl/\"\n   xmlns:soap = \"http://schemas.xmlsoap.org/wsdl/soap/\"\n   xmlns:tns = \"http://www.examples.com/wsdl/HelloService.wsdl\"\n   xmlns:xsd = \"http://www.w3.org/2001/XMLSchema\">\n\n   <message name = \"SayHelloRequest\">\n      <part name = \"firstName\" type = \"xsd:string\"/>\n   </message>\n\n   <message name = \"SayHelloResponse\">\n      <part name = \"greeting\" type = \"xsd:string\"/>\n   </message>\n\n   <portType name = \"Hello_PortType\">\n      <operation name = \"sayHello\">\n         <input message = \"tns:SayHelloRequest\"/>\n         <output message = \"tns:SayHelloResponse\"/>\n      </operation>\n   </portType>\n\n   <binding name = \"Hello_Binding\" type = \"tns:Hello_PortType\">\n      <soap:binding style = \"rpc\"\n         transport = \"http://schemas.xmlsoap.org/soap/http\"/>\n      <operation name = \"sayHello\">\n         <soap:operation soapAction = \"sayHello\"/>\n         <input>\n            <soap:body\n               encodingStyle = \"http://schemas.xmlsoap.org/soap/encoding/\"\n               namespace = \"urn:examples:helloservice\"\n               use = \"encoded\"/>\n         </input>\n\n         <output>\n            <soap:body\n               encodingStyle = \"http://schemas.xmlsoap.org/soap/encoding/\"\n               namespace = \"urn:examples:helloservice\"\n               use = \"encoded\"/>\n         </output>\n      </operation>\n   </binding>\n\n   <service name = \"Hello_Service\">\n      <documentation>WSDL File for HelloService</documentation>\n      <port binding = \"tns:Hello_Binding\" name = \"Hello_Port\">\n         <soap:address\n            location = \"http://www.examples.com/SayHello/\" />\n      </port>\n   </service>\n</definitions>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<definitions name = \"HelloService\"\n   targetNamespace = \"http://www.examples.com/wsdl/HelloService.wsdl\"\n   xmlns = \"http://schemas.xmlsoap.org/wsdl/\"\n   xmlns:soap = \"http://schemas.xmlsoap.org/wsdl/soap/\"\n   xmlns:tns = \"http://www.examples.com/wsdl/HelloService.wsdl\"\n   xmlns:xsd = \"http://www.w3.org/2001/XMLSchema\">\n\n   <message name = \"SayHelloRequest\">\n      <part name = \"firstName\" type = \"xsd:string\"/>\n   </message>\n\n   <message name = \"SayHelloResponse\">\n      <part name = \"greeting\" type = \"xsd:string\"/>\n   </message>\n\n   <portType name = \"Hello_PortType\">\n      <operation name = \"sayHello\">\n         <input message = \"tns:SayHelloRequest\"/>\n         <output message = \"tns:SayHelloResponse\"/>\n      </operation>\n   </portType>\n\n   <binding name = \"Hello_Binding\" type = \"tns:Hello_PortType\">\n      <soap:binding style = \"rpc\"\n         transport = \"http://schemas.xmlsoap.org/soap/http\"/>\n      <operation name = \"sayHello\">\n         <soap:operation soapAction = \"sayHello\"/>\n         <input>\n            <soap:body\n               encodingStyle = \"http://schemas.xmlsoap.org/soap/encoding/\"\n               namespace = \"urn:examples:helloservice\"\n               use = \"encoded\"/>\n         </input>\n\n         <output>\n            <soap:body\n               encodingStyle = \"http://schemas.xmlsoap.org/soap/encoding/\"\n               namespace = \"urn:examples:helloservice\"\n               use = \"encoded\"/>\n         </output>\n      </operation>\n   </binding>\n\n   <service name = \"Hello_Service\">\n      <documentation>WSDL File for HelloService</documentation>\n      <port binding = \"tns:Hello_Binding\" name = \"Hello_Port\">\n         <soap:address\n            location = \"http://www.examples.com/SayHello/\" />\n      </port>\n   </service>\n</definitions>\n"}]}]},{"type":"element","tag":"h4","props":{"id":"遠端過程呼叫rpc的問題"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"遠端過程呼叫(RPC)的問題"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"遠端過程呼叫(RPC)的思想，RPC 模型試圖向遠端網路服務發出請求，看起來與在同一程序中呼叫函式或方法相同。但根本上是有缺陷的。因為網路請求與本地函式呼叫還是有不同之處："}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"本地函式呼叫"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"網路請求"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"可預測的，成功或失敗取決於受你控制的引數"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"不可預測的，請求或響應可能由於網路問題會丟失"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"返回/不返回結果、丟擲異常"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"返回/不返回結果、丟擲異常、或者因為超時造成返回時已沒有結果"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"不會發生響應丟失的情況"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"能會發生請求實際上已經完成，只是響應丟失的情況"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"執行時間大致相同"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"執行時間不穩定(會有網路擁塞或者遠端服務超載的問題)"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"可以高效地將引用(指標)傳遞給本地記憶體中的物件"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"所有引數都需要被編碼成可以透過網路傳送的一系列位元組"}]}]}]}]},{"type":"element","tag":"h4","props":{"id":"rpc的當前方向"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"RPC的當前方向"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上述的編碼在基礎上構建了各種 RPC 框架："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Thrift 和 Avro 帶有 RPC 支援"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"gRPC 是使用 Protocol Buffers 的 RPC 實現"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finagle 也使用 Thrift"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rest.li 使用 JSON over HTTP。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新一代的 RPC 框架更加明確的是，遠端請求與本地函式呼叫不同。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finagle 和 Rest.li 使用 futures(promises)來封裝可能失敗的非同步操作。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"gRPC 支援流，其中一個呼叫不僅包括一個請求和一個響應，還可以是隨時間的一系列請求和響應。"}]}]},{"type":"element","tag":"h3","props":{"id":"訊息傳遞中的資料流"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"訊息傳遞中的資料流"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"RPC 和資料庫之間的非同步訊息傳遞系統。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"與 RPC 類似，因為客戶端的請求(通常稱為訊息)以低延遲傳送到另一個程序。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"與資料庫類似，不是透過直接的網路連線傳送訊息，而是透過稱為訊息代理(也稱為訊息佇列或面向訊息的中介軟體)的中介來臨時儲存訊息。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"與直接 RPC 相比，使用訊息代理有幾個優點："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果收件人不可用或過載，可以充當緩衝區，從而提高系統的可靠性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以自動將訊息重新發送到先前已經崩潰的程序，從而防止訊息丟失。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"避免發件人需要知道收件人的 IP 地址和埠號(這在虛擬機器經常出入的雲部署中特別有用)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"它允許將一條訊息傳送給多個收件人。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"將發件人與收件人邏輯分離(發件人只是釋出郵件，不關心使用者)。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"與 RPC 相比，差異在於訊息傳遞通訊通常是單向的：傳送者通常不期望收到其訊息的回覆。一個程序可能傳送一個響應，但這通常是在一個單獨的通道上完成的。這種通訊模式是非同步的：傳送者不會等待訊息被傳遞，而只是傳送它，然後忘記它。"}]},{"type":"element","tag":"h4","props":{"id":"訊息代理"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"訊息代理"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"訊息代理的使用方式如下：一個程序將訊息傳送到指定的佇列或主題，代理確保將訊息傳遞給那個佇列或主題的一個或多個消費者或訂閱者。在同一主題上可以有許多生產者和許多消費者。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"訊息代理通常不會執行任何特定的資料模型 —— 訊息只是包含一些元資料的位元組序列，因此你可以使用任何編碼格式。如果編碼是向後和向前相容的，你可以靈活地對釋出者和消費者的編碼進行獨立的修改，並以任意順序進行部署。"}]},{"type":"element","tag":"h4","props":{"id":"分散式的actor框架"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"分散式的Actor框架"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Actor 模型是單個程序中併發的程式設計模型。邏輯被封裝在 actor 中，而不是直接處理執行緒。actor 通常代表一個客戶或實體，它可能有一些本地狀態(不與其他任何角色共享)，它透過傳送和接收非同步訊息與其他角色通訊。不保證訊息傳送：在某些錯誤情況下，訊息將丟失。由於每個角色一次只能處理一條訊息，因此不需要擔心執行緒，每個角色可以由框架獨立排程。分散式的 Actor 框架實質上是將訊息代理和 actor 程式設計模型整合到一個框架中。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"三個流行的分散式 actor 框架處理訊息編碼如下："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Akka 使用 Java 的內建序列化，不提供前向或後向相容性。 但是，你可以用類似 Prototol Buffers 的東西替代它，從而獲得滾動升級的能力。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Orleans 預設使用不支援滾動升級部署的自定義資料編碼格式；要部署新版本的應用程式，你需要設定一個新的叢集，將流量從舊叢集遷移到新叢集，然後關閉舊叢集。像 Akka 一樣，可以使用自定義序列化外掛。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Erlang OTP 中，對記錄模式進行更改是非常困難的(儘管系統具有許多為高可用性設計的功能)。 滾動升級是可能的，但需要仔細計劃。 一個新的實驗性的 maps 資料型別(2014 年在 Erlang R17 中引入的類似於 JSON 的結構)可能使得這個資料型別在未來更容易。"}]}]},{"type":"element","tag":"h2","props":{"id":"小結"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"font","props":{"color":"#66B3FF"},"children":[{"type":"text","value":"小結"}]}]}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"編碼資料的格式bo","depth":2,"text":"編碼資料的格式bo","children":[{"id":"語言特定的格式","depth":3,"text":"語言特定的格式"},{"id":"jsonxml和csv","depth":3,"text":"JSON、XML和CSV"},{"id":"模式的優點","depth":3,"text":"模式的優點"}]},{"id":"資料流的型別","depth":2,"text":"資料流的型別","children":[{"id":"資料庫中的資料流","depth":3,"text":"資料庫中的資料流"},{"id":"服務中的資料流rest與rpc","depth":3,"text":"服務中的資料流：REST與RPC"},{"id":"訊息傳遞中的資料流","depth":3,"text":"訊息傳遞中的資料流"}]},{"id":"小結","depth":2,"text":"小結"}]}},"_type":"markdown","_id":"content:5.ddia:4.chapter4.md","_source":"content","_file":"5.ddia/4.chapter4.md","_extension":"md"}